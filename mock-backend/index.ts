import express from "express";
import jwt from "jsonwebtoken";
import { graphqlHTTP } from "express-graphql";
import {
  GraphQLSchema,
  GraphQLObjectType,
  GraphQLString,
  GraphQLList,
  GraphQLNonNull,
  GraphQLInt,
  GraphQLID,
} from "graphql";

const port = 4000;

const app = express();

app.use(express.json());

const JWT_SECRET = "your-secret-key";

// TODO - replace with autogenerated data / a local db

const urlDb = {
  "chrome://extensions/": "a",
};

// --- Fake user DB ---
const users = [{ id: "1", username: "test", password: "password" }];

// ---------------------------------
// REST Endpoint for Login (JWT)
// ---------------------------------
app.post("/auth/login", (req, res) => {
  const { username, password } = req.body;
  const user = users.find(
    (u) => u.username === username && u.password === password
  );

  if (!user) return res.status(401).json({ message: "Invalid credentials" });

  const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: "1h" });
  res.json({ token });
});

// ---------------------------------
// JWT Authentication Middleware
// ---------------------------------
const authMiddleware = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (authHeader?.startsWith("Bearer ")) {
    const token = authHeader.split(" ")[1];
    try {
      const decoded = jwt.verify(token, JWT_SECRET);
      req.user = decoded;
    } catch (err) {
      console.warn("JWT verification failed:", err.message);
    }
  }

  next();
};

app.use(authMiddleware);

type Comment = {
  id: string;
  parentId: string | null;
  text: string;
  upvotes: number;
  downvotes: number;
  replyIds: string[];
};

const commentsDb: Record<string, Comment[]> = {
  a: [
    {
      id: "1",
      parentId: null,
      text: "This is the first comment!",
      upvotes: 5,
      downvotes: 1,
      replyIds: ["3"],
    },
    {
      id: "2",
      parentId: null,
      text: "Great post, thanks for sharing.",
      upvotes: 8,
      downvotes: 0,
      replyIds: [],
    },
    {
      id: "3",
      parentId: "1",
      text: "This is the first reply!",
      upvotes: 3,
      downvotes: 4,
      replyIds: [],
    },
  ],
};

// GraphQL Types
const CommentType: GraphQLObjectType = new GraphQLObjectType({
  name: "Comment",
  fields: () => ({
    id: { type: GraphQLNonNull(GraphQLID) },
    parentId: { type: GraphQLString },
    text: { type: GraphQLNonNull(GraphQLString) },
    upvotes: { type: GraphQLNonNull(GraphQLInt) },
    downvotes: { type: GraphQLNonNull(GraphQLInt) },
    replies: {
      type: GraphQLList(CommentType),
      resolve: (parent) => {
        return commentsDb["a"].filter((c) => parent.replyIds.includes(c.id));
      },
    },
  }),
});

// Root Query
const RootQueryType = new GraphQLObjectType({
  name: "Query",
  fields: {
    urlId: {
      type: GraphQLString,
      args: {
        url: { type: GraphQLNonNull(GraphQLString) },
      },
      resolve: (_, { url }) => {
        return urlDb[url] || null;
      },
    },
    comments: {
      type: GraphQLList(CommentType),
      args: {
        urlId: { type: GraphQLNonNull(GraphQLString) },
      },
      resolve: (_, { urlId }) => commentsDb[urlId] || [],
    },
    comment: {
      type: CommentType,
      args: {
        urlId: { type: GraphQLNonNull(GraphQLString) },
        id: { type: GraphQLNonNull(GraphQLID) },
      },
      resolve: (_, { urlId, id }) => {
        return commentsDb[urlId]?.find((c) => c.id === id) || null;
      },
    },
  },
});

// Mutations
const RootMutationType = new GraphQLObjectType({
  name: "Mutation",
  fields: {
    addComment: {
      type: CommentType,
      args: {
        urlId: { type: GraphQLNonNull(GraphQLString) },
        text: { type: GraphQLNonNull(GraphQLString) },
        parentId: { type: GraphQLString },
      },
      resolve: (_, { urlId, text, parentId }) => {
        const newComment: Comment = {
          id: Date.now().toString(),
          parentId: parentId || null,
          text,
          upvotes: 0,
          downvotes: 0,
          replyIds: [],
        };

        if (!commentsDb[urlId]) commentsDb[urlId] = [];
        commentsDb[urlId].push(newComment);

        if (parentId) {
          const parent = commentsDb[urlId].find((c) => c.id === parentId);
          if (parent) parent.replyIds.push(newComment.id);
        }

        return newComment;
      },
    },
    upvoteComment: {
      type: CommentType,
      args: {
        urlId: { type: GraphQLNonNull(GraphQLString) },
        id: { type: GraphQLNonNull(GraphQLID) },
      },
      resolve: (_, { urlId, id }) => {
        const comment = commentsDb[urlId]?.find((c) => c.id === id);
        if (!comment) throw new Error("Comment not found");
        comment.upvotes += 1;
        return comment;
      },
    },
    downvoteComment: {
      type: CommentType,
      args: {
        urlId: { type: GraphQLNonNull(GraphQLString) },
        id: { type: GraphQLNonNull(GraphQLID) },
      },
      resolve: (_, { urlId, id }) => {
        const comment = commentsDb[urlId]?.find((c) => c.id === id);
        if (!comment) throw new Error("Comment not found");
        comment.downvotes += 1;
        return comment;
      },
    },
  },
});

// Schema
const schema = new GraphQLSchema({
  query: RootQueryType,
  mutation: RootMutationType,
});

// --- GraphQL Endpoint ---
app.use(
  "/graphql",
  graphqlHTTP((req) => ({
    schema,
    graphiql: true,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    context: { user: (req as any).user }, // Pass authenticated user to resolvers
  }))
);

// --- Start server ---
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
  console.log(`GraphQL at http://localhost:${port}/graphql`);
});
