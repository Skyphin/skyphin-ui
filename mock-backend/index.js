import express from 'express';

const app = express();
const port = 5000;

app.use(express.json());

// TODO - replace with autogenerated data / a local db

let urlDb = {
    'chrome://extensions/': 'a'
}

let commentsDb = {
    'a': [
        { id: '1', perentId: null, text: 'This is the first comment!', upvotes: 5, downvotes: 1, replyIds: [3] },
        { id: '2', parentId: null, text: 'Great post, thanks for sharing.', upvotes: 8, downvotes: 0, replyIds: [] },
        { id: '3', parentId: '1', text: 'This is the first reply!', upvotes: 3, downvotes: 4, replyIds: [] }
    ]
};

app.get('/check', (req, res) => {
    /**
     * Check if the URL is already in the database
     * TODO - should return custom response if url is blocked / not allowed / not supported
     */
    const url = req.query.url;
    const urlId = urlDb[url];
    if (!urlId) return res.status(404).json({ message: 'URL not found' });
    res.json({ urlId });
})

app.get('/:urlid/comments', (req, res) => {
    res.json(commentsDb[req.params.urlid]);
});

app.get('/:urlid/comments/:id', (req, res) => {
    const comment = commentsDb[req.params.urlid].find(c => c.id === req.params.id);
    if (!comment) return res.status(404).json({ message: 'Comment not found' });
    res.json(comment);
});

app.get('/:urlid/comments/:id/replies', (req, res) => {
    const comment = commentsDb[req.params.urlid].find(c => c.id === req.params.id);
    if (!comment) return res.status(404).json({ message: 'Comment not found' });
    res.json(comment.replies);
});

app.post('/:urlid/comments', (req, res) => {
    const { text } = req.body;
    if (!text) return res.status(400).json({ message: 'Text is required' });

    const newComment = {
        id: commentsDb[req.params.urlid].length + 1,
        text,
        upvotes: 0,
        downvotes: 0,
        replies: []
    };
    commentsDb[req.params.urlid].push(newComment);
    res.status(201).json(newComment);
});

app.post('/:urlid/comments/:id/reply', (req, res) => {
    const { text } = req.body;
    if (!text) return res.status(400).json({ message: 'Reply text is required' });

    const comment = commentsDb[req.params.urlid].find(c => c.id === req.params.id);
    if (!comment) return res.status(404).json({ message: 'Comment not found' });

    const newReply = {
        id: comment.replies.length + 1,
        text,
        upvotes: 0,
        downvotes: 0
    };

    comment.replies.push(newReply);
    res.status(201).json(newReply);
});

app.post('/:urlid/comments/:id/upvote', (req, res) => {
    const comment = commentsDb[req.params.urlid].find(c => c.id === req.params.id);
    if (!comment) return res.status(404).json({ message: 'Comment not found' });

    comment.upvotes += 1;
    res.json(comment);
});

app.post('/:urlid/comments/:id/downvote', (req, res) => {
    const comment = commentsDb[req.params.urlid].find(c => c.id === req.params.id);
    if (!comment) return res.status(404).json({ message: 'Comment not found' });

    comment.downvotes += 1;
    res.json(comment);
});

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});
